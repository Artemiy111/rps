generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Card {
  rock
  paper
  scissors
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  name     String @unique
  password String

  matchesTherePlayer1 Game[]      @relation("player1")
  matchesTherePlayer2 Game[]      @relation("player2")
  token               UserToken?
  games               Game[]
  roundsWhereWon      GameRound[]

  @@map("users")
}

model UserToken {
  id      String @id @default(uuid()) @db.Uuid
  refresh String @unique

  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  @@map("users_token")
}

model Game {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  startedAt DateTime? @map("started_at")
  endedAt   DateTime? @map("ended_at")

  player1Id    String @map("player1_id") @db.Uuid
  player1      User   @relation(name: "player1", fields: [player1Id], references: [id])
  player1Score Int    @default(0) @map("player1_score")

  player2Id    String? @map("player2_id") @db.Uuid
  player2      User?   @relation(name: "player2", fields: [player2Id], references: [id])
  player2Score Int     @default(0) @map("player2_score")

  players User[]
  rounds  GameRound[]

  @@map("matches")
}

model GameRound {
  id     String @id @default(uuid()) @db.Uuid
  gameId String @db.Uuid
  game   Game   @relation(fields: [gameId], references: [id])
  order  Int    @default(1)

  winnerId String? @db.Uuid
  winner   User?   @relation(fields: [winnerId], references: [id])

  @@unique([gameId, order])
  @@map("game_rounds")
}
